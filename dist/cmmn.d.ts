declare function dcp(o: any): any;
declare function is_int_str(s: string): boolean;
declare function range(si: number, ei: number): Array<number>;
declare function slct_via_seqs(arr: Array<any>, ...seqs: Array<number>): Array<any>;
declare function array_lst(arr: Array<any>): any;
declare function array_max(arr: Array<any>): any;
declare function array_min(arr: Array<any>): any;
declare function mat_mapxyv(m: any, map_func: any): any;
declare function mat_mapv(m: any, map_func: any): any;
declare function dict_length(d: object): number;
declare function is_empty_dict(d: object): boolean;
declare function dict_keys(d: object): Array<any>;
declare function dict_values(d: object): Array<any>;
declare function dict_foreach(d: any, f: any): any;
declare function dict_mapv(d: any, f: any): any;
declare function dict_mapk(d: any, f: any): {};
declare function dict_update_force(d0: object, d1: object): object;
declare function dict_update(d0: object, d1: object): object;
declare function dtb_get_tr_via_kv(dtb: Array<any>, k: any, v: any): Array<any>;
declare function dtb_get_fst_tr_via_kv(dtb: Array<any>, k: any, v: any): any;
declare function dtb_get_tr_via_id(dtb: Array<any>, _id: any): any;
declare function dtb_get_val_via_id_and_key(dtb: Array<any>, _id: any, k: any): any;
declare function dtb_rm_via_kv(dtb: Array<any>, k: any, v: any): Array<any>;
declare function dtb_rm_via_id(dtb: Array<any>, _id: any): Array<any>;
declare function dtb_get_seq_via_kv(dtb: Array<any>, k: any, v: any): number;
declare function dtb_get_seq_via_id(dtb: Array<any>, _id: any): number;
declare function gen_guid(): string;
export { dcp, is_int_str, range, slct_via_seqs, array_lst, array_max, array_min, mat_mapv, mat_mapxyv, dict_length, is_empty_dict, dict_keys, dict_values, dict_foreach, dict_mapk, dict_mapv, dict_update_force, dict_update, dtb_get_tr_via_kv, dtb_get_fst_tr_via_kv, dtb_get_tr_via_id, dtb_get_val_via_id_and_key, dtb_rm_via_kv, dtb_rm_via_id, dtb_get_seq_via_kv, dtb_get_seq_via_id, gen_guid, };

function creat_nd(nodes,n=0) {
function is_inited(nd) {
function is_root(nd) {
function is_fstch(nd) {
function is_lstch(nd) {
function is_leaf(nd) {
function is_lonely(nd,nodes) {
function is_connectable(nd) {
function eq(nd0,nd1) {
function prepend_child(nd,child,nodes) {
function append_child(nd,child,nodes) {
function add_rsib(nd,rsib,nodes) {
function add_lsib(nd,lsib,nodes) {
function insert_child(which,nd,child,nodes) {
function update_treeid(nd,cnodes) {
function prepend_child_tree(nd,nodes,cnodes) {
function append_child_tree(nd,nodes,cnodes) {
function add_rsib_tree(nd,nodes,cnodes) {
function add_lsib_tree(nd,nodes,cnodes) {
function insert_child_tree(which,nd,nodes,cnodes) {
function update_disconnected_nodes(nd,nodes) {
function update_orig_nodes(nsdfs,nodes) {
function leafize(nd) {
function rootize(nd) {
function disconnect(nd,nodes) {
function rm_fstch(nd,nodes) {
function rm_lstch(nd,nodes) {
function rm_which(index,nd,nodes) {
function rm_some(nd,nodes,...whices) {
function rm_all(nd,nodes) {
function get_fstch(nd,nodes) {
function get_children(nd,nodes){
function get_lstch(nd,nodes) {
function get_which_child(which,nd,nodes) {
function get_some_children(nd,nodes,...whiches) {
function get_lstsib(nd,nodes,including_self=false) {
function get_preceding_sibs(nd,nodes) {
function get_following_sibs(nd,nodes) {
function get_sibs(nd,nodes,including_self=false) {
function get_fstsib(nd,nodes,including_self=false) {
function get_which_sib(which,nd,nodes) {
function get_some_sibs(nd,nodes,...whiches) {
function get_sibseq(nd,nodes) {
function get_lsib(nd,nodes) {
function get_rsib(nd,nodes) {
function get_depth(nd,nodes) {
function get_height(nd,nodes) {
function get_fst_lyr_des_depth(nd,nodes) {
function get_lst_lyr_des_depth(nd,nodes) {
function get_which_lyr_des_depth(which,nd,nodes) {
function get_lyr(nd,nodes) {
function get_breadth(nd,nodes) {
function get_count(nd,nodes) {
function get_root(nd,nodes) {
function get_parent(nd,nodes) {
function get_ances(nd,nodes,including_self=false) {
function get_which_ance(which,nd,nodes) {
function get_some_ances(nd,nodes,...whiches) {
function get_rsib_of_fst_ance_having_rsib(nd,nodes) {
function get_sdfs_next(nd,nodes) {
function get_drmost_des(nd,nodes){
function get_sdfs_prev(nd,nodes) {
function get_sdfs(nd,nodes) {
function get_dlmost_des(nd,nodes) {
function get_edfs_next(nd,nodes) {
function get_lsib_of_fst_ance_having_lsib(nd,nodes) {
function get_edfs_prev(nd,nodes) {
function get_edfs(nd,nodes) {
function clear_$visited(nodes) {
function get_sedfs_next(nd,nodes) {
function get_sedfs_prev(visited,nd,nodes) {
function is_sedfs_traverse_finished(start_id,nd) {
function get_sedfs(nd,nodes,deepcopy=false,clear=true) {
function nd2ele(nd,nodes) {
function _nd2unhandled_ele(nd) {
function sdfs2mat(sdfs,nodes) {
function sdfs2edfs(sdfs,nodes) {
function sdfs2sedfs(sdfs,nodes,deepcopy=false,clear=true) {
function edfs2mat(edfs,nodes) {
function edfs2sdfs(edfs,nodes) {
function edfs2sedfs(edfs,nodes,deepcopy=false,clear=true) {
function sedfs2mat(sedfs,nodes) {
function sedfs2sdfs(sedfs,nodes) {
function sedfs2edfs(sedfs,nodes) {
function get_deses(nd,nodes,including_self=false) {
function get_fst_lyr_deses(nd,nodes) {
function get_lst_lyr_deses(nd,nodes) {
function get_which_lyr_deses(which,nd,nodes) {
function get_some_deses(nd,nodes,...whiches) {
function get_root_via_tree(tree) {
function tree2sdfs(tree) {

